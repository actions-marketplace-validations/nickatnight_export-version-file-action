#!/usr/bin/env python3

import json
import os
import sys
from typing import NoReturn

from github import Github
from github.Repository import Repository


INPUT_BRANCH = os.getenv("INPUT_BRANCH")                            # input 'branch' from action
INPUT_FILENAME = os.getenv("INPUT_FILENAME")                        # input 'filename' from action
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")                            # pass as env var from action
GITHUB_EVENT_PATH = os.getenv("GITHUB_EVENT_PATH")                  # prodvided by GitHub runner


class ExportVersionFileAction:
    def __init__(self) -> NoReturn:
        if not GITHUB_TOKEN:
            print(f"Missing GITHUB_TOKEN")
            sys.exit(0)

        self.github = Github(GITHUB_TOKEN)
        self.event_json = None

        self._read_event_path_data()

    def _read_event_path_data(self) -> NoReturn:
        """read in json payload from event trigger
        :return:            nothing
        """
        with open(GITHUB_EVENT_PATH) as json_file:
            event_json = json.load(json_file)
        self.event_json = event_json

    def get_repo_object(self) -> Repository:
        """fetch Repository() object by parsing event data
        :return:            repo to act on
        """
        repo_name = self.event_json["repository"]["full_name"]
        repo_object = self.github.get_repo(repo_name)
        return repo_object

    def main(self) -> NoReturn:
        """get the latest tag and update *INPUT_FILENAME*
        :return:            nothing
        """
        repo = self.get_repo_object()
        release = repo.get_latest_release().tag_name
        commit_message = f"docs: updated '{INPUT_FILENAME}' file to {release}"

        if os.path.isfile(INPUT_FILENAME):
            contents = repo.get_contents(INPUT_FILENAME, ref=INPUT_BRANCH)
            repo.update_file(
                contents.path, commit_message, release, contents.sha, branch=INPUT_BRANCH
            )
        else:
            repo.create_file(INPUT_FILENAME, commit_message, release, branch=INPUT_BRANCH)


if __name__ == "__main__":
    handle = ExportVersionFileAction()
    handle.main()
